X2=modelSimulator(n2)
myPvalue[i]=doTest(X1,X2,n1,n2,p,rmax=10)
# oracle: V known
temp=chenStat(X1%*%V,X2%*%V,n1,n2)
tempOracleStat=n1*n2*temp/(sqrt(2*p)*(n1+n2)*1)
oraclePvalue[i]=pnorm(tempOracleStat,0,1,lower.tail = FALSE)
}
myLevel=sum(myPvalue<0.05)/B
#oracleLevel=sum(oraclePvalue<0.05)/B
}
Out=data.frame(n1=0,n2=0,p=0,r=0,beta=0,level=0)
for(beta in c(0.5,1,2))
for(r in 2)
for(p in c(20,50,100,200,300))
for(n in c(70,140,210)){
n1=n
n2=n
level=simulateLevel(n1,n2,p,r,beta)
temp=data.frame(n1=n1,n2=n2,p=p,r=r,beta=beta,level=level)
Out=rbind(Out,temp)
}
Out
n1=n2=70
n1
n2
p=100
r=2
beta=0.5
temp=modelGenerator(p=p,r=r,beta=beta)
V=temp$V
D=temp$D
modelSimulator=temp$modelSimulator
myPvalue=NULL
oraclePvalue=NULL
for(i in 1:B){
X1=modelSimulator(n1)
X2=modelSimulator(n2)
myPvalue[i]=doTest(X1,X2,n1,n2,p,rmax=10)
# oracle: V known
temp=chenStat(X1%*%V,X2%*%V,n1,n2)
tempOracleStat=n1*n2*temp/(sqrt(2*p)*(n1+n2)*1)
oraclePvalue[i]=pnorm(tempOracleStat,0,1,lower.tail = FALSE)
}
myLevel=sum(myPvalue<0.05)/B
oracleLevel=sum(oraclePvalue<0.05)/B
hist(oraclePvalue)
hist(myPvalue)
svd(var(X1%*%V))
D
D^2
svd((var(X1%*%V)+var(X2%*%V))/2)
jjj=modelSimulator(1000)
svd(var(jjj%*%V))
a=rnorm(100,0,1)
dim(a)=c(50,2)
a
svd(a)
svd(var(a))
eigen(var(a))
a=rnorm(1000,0,1)
dim(a)=c(500,2)
eigen(var(a))
a=rnorm(500,0,1)
dim(a)=c(250,2)
eigen(var(a))
a=rnorm(70,0,1)
a=rnorm(140,0,1)
dim(a)=c(70,2)
eigen(var(a))
a=rnorm(140,0,1)
dim(a)=c(70,2)
eigen(var(a))
eigen(var(X1%*%V))
D^2
a=rnorm(70,0,1)
str(X1)
temp=modelGenerator(p=p,r=r,beta=beta)
V=temp$V
D=temp$D
modelSimulator=temp$modelSimulator
myPvalue=NULL
oraclePvalue=NULL
for(i in 1:B){
X1=modelSimulator(n1)
X2=modelSimulator(n2)
myPvalue[i]=doTest(X1,X2,n1,n2,p,rmax=10)
# oracle: V known
temp=chenStat(X1%*%V,X2%*%V,n1,n2)
tempOracleStat=n1*n2*temp/(sqrt(2*p)*(n1+n2)*1)
oraclePvalue[i]=pnorm(tempOracleStat,0,1,lower.tail = FALSE)
}
X1
D
n1
n2
p
var(X1%*%V)
D^2
temp=modelGenerator(p=p,r=r,beta=beta)
V=temp$V
D=temp$D
modelSimulator=temp$modelSimulator
myPvalue=NULL
oraclePvalue=NULL
for(i in 1:B){
X1=modelSimulator(n1)
X2=modelSimulator(n2)
myPvalue[i]=doTest(X1,X2,n1,n2,p,rmax=10)
# oracle: V known
temp=chenStat(X1%*%V,X2%*%V,n1,n2)
tempOracleStat=n1*n2*temp/(sqrt(2*p)*(n1+n2)*1)
oraclePvalue[i]=pnorm(tempOracleStat,0,1,lower.tail = FALSE)
}
X1%*%V
var(X1%*%V)
eigen(var(X1%*%V))
D^2
?solve
V
solve(t(V),0)
?Null
library(MASS)
?Null
Null
Vjj=Null(V)
str(Vjj)
t(V)%*%Vjj
eigen(t(V)%*%Vjj)$values
svd(t(V)%*%Vjj)$d
temp=modelGenerator(p=p,r=r,beta=beta)
V=temp$V
D=temp$D
modelSimulator=temp$modelSimulator
myPvalue=NULL
oraclePvalue=NULL
for(i in 1:B){
X1=modelSimulator(n1)
X2=modelSimulator(n2)
myPvalue[i]=doTest(X1,X2,n1,n2,p,rmax=10)
# oracle: V known
temp=chenStat(X1%*%Null(V),X2%*%Null(V),n1,n2)
tempOracleStat=n1*n2*temp/(sqrt(2*p)*(n1+n2)*1)
oraclePvalue[i]=pnorm(tempOracleStat,0,1,lower.tail = FALSE)
}
myLevel=sum(myPvalue<0.05)/B
oracleLevel=sum(oraclePvalue<0.05)/B
temp=modelGenerator(p=p,r=r,beta=beta)
V=temp$V
D=temp$D
modelSimulator=temp$modelSimulator
myPvalue=NULL
oraclePvalue=NULL
for(i in 1:B){
X1=modelSimulator(n1)
X2=modelSimulator(n2)
myPvalue[i]=doTest(X1,X2,n1,n2,p,rmax=10)
# oracle: V known
temp=chenStat(X1%*%Null(V),X2%*%Null(V),n1,n2)
tempOracleStat=n1*n2*temp/(sqrt(2*p)*(n1+n2)*1)
oraclePvalue[i]=pnorm(tempOracleStat,0,1,lower.tail = FALSE)
}
myLevel=sum(myPvalue<0.05)/B
oracleLevel=sum(oraclePvalue<0.05)/B
hist(oracleLevel)
hist(oraclePvalue)
hist(myPvalue)
source("./stat.R")
library(ggplot2)
library(xtable)
simulateLevel=function(n1,n2,p,r,beta,B=100,rmax=10){
temp=modelGenerator(p=p,r=r,beta=beta)
V=temp$V
D=temp$D
modelSimulator=temp$modelSimulator
myPvalue=NULL
oraclePvalue=NULL
for(i in 1:B){
X1=modelSimulator(n1)
X2=modelSimulator(n2)
myPvalue[i]=doTest(X1,X2,n1,n2,p,rmax=10)
# oracle: V known
temp=chenStat(X1%*%Null(V),X2%*%Null(V),n1,n2)
tempOracleStat=n1*n2*temp/(sqrt(2*p)*(n1+n2)*1)
oraclePvalue[i]=pnorm(tempOracleStat,0,1,lower.tail = FALSE)
}
myLevel=sum(myPvalue<0.05)/B
oracleLevel=sum(oraclePvalue<0.05)/B
list(myLevel=myLevel,oracleLevel=oracleLevel)
}
Out=data.frame(n1=0,n2=0,p=0,r=0,beta=0,myLevel=0,oracleLevel=0)
for(beta in c(0.5,1,2))
for(r in 2)
for(p in c(20,50,100,200,300))
for(n in c(70,140,210)){
n1=n
n2=n
level=simulateLevel(n1,n2,p,r,beta)
temp=data.frame(n1=n1,n2=n2,p=p,r=r,beta=beta,myLevel=level,oracleLevel=oracleLevel)
Out=rbind(Out,temp)
}
Out
temp
source("./stat.R")
library(ggplot2)
library(xtable)
simulateLevel=function(n1,n2,p,r,beta,B=100,rmax=10){
temp=modelGenerator(p=p,r=r,beta=beta)
V=temp$V
D=temp$D
modelSimulator=temp$modelSimulator
myPvalue=NULL
oraclePvalue=NULL
for(i in 1:B){
X1=modelSimulator(n1)
X2=modelSimulator(n2)
myPvalue[i]=doTest(X1,X2,n1,n2,p,rmax=10)
# oracle: V known
temp=chenStat(X1%*%Null(V),X2%*%Null(V),n1,n2)
tempOracleStat=n1*n2*temp/(sqrt(2*p)*(n1+n2)*1)
oraclePvalue[i]=pnorm(tempOracleStat,0,1,lower.tail = FALSE)
}
myLevel=sum(myPvalue<0.05)/B
oracleLevel=sum(oraclePvalue<0.05)/B
list(myLevel=myLevel,oracleLevel=oracleLevel)
}
Out=data.frame(n1=0,n2=0,p=0,r=0,beta=0,myLevel=0,oracleLevel=0)
for(beta in c(0.5,1,2))
for(r in 2)
for(p in c(20,50,100,200,300))
for(n in c(70,140,210)){
n1=n
n2=n
level=simulateLevel(n1,n2,p,r,beta)
temp=data.frame(n1=n1,n2=n2,p=p,r=r,beta=beta,myLevel=level$myLevel,oracleLevel=level$oracleLevel)
Out=rbind(Out,temp)
}
Out
source("./stat.R")
library(ggplot2)
library(xtable)
simulateLevel=function(n1,n2,p,r,beta,B=1000,rmax=10){
temp=modelGenerator(p=p,r=r,beta=beta)
V=temp$V
D=temp$D
modelSimulator=temp$modelSimulator
myPvalue=NULL
oraclePvalue=NULL
for(i in 1:B){
X1=modelSimulator(n1)
X2=modelSimulator(n2)
myPvalue[i]=doTest(X1,X2,n1,n2,p,rmax=10)
# oracle: V known
temp=chenStat(X1%*%Null(V),X2%*%Null(V),n1,n2)
tempOracleStat=n1*n2*temp/(sqrt(2*p)*(n1+n2)*1)
oraclePvalue[i]=pnorm(tempOracleStat,0,1,lower.tail = FALSE)
}
myLevel=sum(myPvalue<0.05)/B
oracleLevel=sum(oraclePvalue<0.05)/B
list(myLevel=myLevel,oracleLevel=oracleLevel)
}
Out=data.frame(n1=0,n2=0,p=0,r=0,beta=0,myLevel=0,oracleLevel=0)
for(beta in c(0.5,1,2))
for(r in 2)
for(p in c(20,50,100,200,300,400))
for(n in c(100,200,300)){
n1=n
n2=n
level=simulateLevel(n1,n2,p,r,beta)
temp=data.frame(n1=n1,n2=n2,p=p,r=r,beta=beta,myLevel=level$myLevel,oracleLevel=level$oracleLevel)
Out=rbind(Out,temp)
}
Out=Out[-1,]
write.csv(Out,"level.csv")
Out
row.names(Out)=NULL
Out
write.csv(Out,"level.csv",row.names = FALSE)
Out=Out[,-2]
Temp1=Out[Out$beta==0.5,]
Temp1=Out[Out$beta==0.5,]
Temp2=Out[Out$beta==1,]
Temp1=Out[Out$beta==2,]
Temp1
?merge
merge(Temp1,Temp2,by=c("n1","p","r"))
Temp1
Temp2
Temp3
Temp1=Out[Out$beta==0.5,]
Temp2=Out[Out$beta==1,]
Temp3=Out[Out$beta==2,]
merge(Temp1,Temp2,by=c("n1","p","r"))
TTT2=merge(TTT1,Temp3,by=c"n1","p","r")
TTT2=merge(TTT1,Temp3,by=c("n1","p","r"))
TTT1=merge(Temp1,Temp2,by=c("n1","p","r"))
TTT2=merge(TTT1,Temp3,by=c("n1","p","r"))
TTT2
TTT2=TTT2[,-c(3,4,7,10)]
TTT2
names(TTT2)=c("n","p","myLevelbeta0.5","oracleLevelbeta0.5","myLevelbeta1","oracleLevelbeta1","myLevelbeta2","oracleLevelbeta2")
myTable1=xtable(TTT2,digits=c(0,0,3,3,3,3,3,3),caption="Test level simulation",label="biaoge1")
myTable1=xtable(TTT2,digits=c(0,0,0,3,3,3,3,3,3),caption="Test level simulation",label="biaoge1")
align(myTable1) <- "rrrrrrrr"
myTable1=xtable(TTT2,digits=c(0,0,0,3,3,3,3,3,3),caption="Test level simulation",label="biaoge1")
align(myTable1) <- "rrrrrrrrr"
print(myTable1,file="level.tex",include.rownames=FALSE)
TTT2
?sort
order(TTT2[,1],TTT2[,2])
TTT2[order(TTT2[,1],TTT2[,2]),]
TTT2=TTT2[order(TTT2[,1],TTT2[,2]),]
myTable1=xtable(TTT2,digits=c(0,0,0,3,3,3,3,3,3),caption="Test level simulation",label="biaoge1")
align(myTable1) <- "rrrrrrrrr"
print(myTable1,file="level.tex",include.rownames=FALSE)
TTT2=TTT2[order(TTT2[,1],TTT2[,2]),]
TTT2
library(readr)
library(plyr)
myFileName=dir("stock data")
data=list()
for(i in myFileName){
temp=read_csv(paste0("stock data/",i))
data=c(data,list(temp[,c(2,6)]))
}
date=NULL
for(i in data){
date=union(date,i[,1])
}
date=as.Date(date)
date=sort(date)
date=data.frame(date=date)
myList=llply(data,function(x){
merge(date,x,all.x=TRUE)$close
})
temp=unlist(myList)
library(readr)
library(plyr)
myFileName=dir("stock data")
data=list()
for(i in myFileName){
temp=read_csv(paste0("stock data/",i))
data=c(data,list(temp[,c(2,6)]))
}
data
library(readr)
library(plyr)
myFileName=dir("stock data")
data=list()
for(i in myFileName){
temp=read_csv(paste0("stock data/",i))
data=c(data,list(temp[,c(2,6)]))
}
myFileName
myFileName=dir("stock data")
dir
dir()
source('~/firstP/code/stat.R', echo=TRUE)
source('~/firstP/code/stat.R', echo=TRUE)
X1 <- normalModelSimulator(n1)
n1 <- 30
n2 <- 30
X1 <- normalModelSimulator(n1)
X2 <- normalModelSimulator(n2)
colMeans(X1)
colMeans(X2)
eigen(X2)$values
eigen(var(X2))$values
source('~/firstP/code/stat.R', echo=TRUE)
source('~/firstP/code/stat.R', echo=TRUE)
source('~/firstP/code/stat.R', echo=TRUE)
source('~/firstP/code/stat.R', echo=TRUE)
source('~/firstP/code/stat.R', echo=TRUE)
source('~/firstP/code/stat.R', echo=TRUE)
source('~/firstP/code/stat.R', echo=TRUE)
source('~/firstP/code/stat.R', echo=TRUE)
source('~/firstP/code/stat.R', echo=TRUE)
source('~/firstP/code/stat.R', echo=TRUE)
source('~/firstP/code/stat.R', echo=TRUE)
source('~/firstP/code/stat.R', echo=TRUE)
source('~/firstP/code/stat.R', echo=TRUE)
source('~/firstP/code/stat.R', echo=TRUE)
source('~/firstP/code/stat.R', echo=TRUE)
source('~/firstP/code/stat.R', echo=TRUE)
source('~/firstP/code/stat.R', echo=TRUE)
source('~/firstP/code/stat.R', echo=TRUE)
source('~/firstP/code/stat.R', echo=TRUE)
source('~/firstP/code/stat.R', echo=TRUE)
source('~/firstP/code/stat.R', echo=TRUE)
source('~/firstP/code/stat.R', echo=TRUE)
source('~/firstP/code/stat.R', echo=TRUE)
source('~/firstP/code/stat.R', echo=TRUE)
source('~/firstP/code/stat.R', echo=TRUE)
source('~/firstP/code/stat.R', echo=TRUE)
source('~/firstP/code/stat.R', echo=TRUE)
source('~/firstP/code/stat.R', echo=TRUE)
source('~/firstP/code/stat.R', echo=TRUE)
source('~/firstP/code/stat.R', echo=TRUE)
source('~/firstP/code/stat.R', echo=TRUE)
source('~/firstP/code/stat.R', echo=TRUE)
source('~/firstP/code/stat.R', echo=TRUE)
source('~/firstP/code/stat.R', echo=TRUE)
source('~/firstP/code/stat.R', echo=TRUE)
source('~/firstP/code/stat.R', echo=TRUE)
source('~/firstP/code/stat.R', echo=TRUE)
source('~/firstP/code/stat.R', echo=TRUE)
source('~/firstP/code/stat.R', echo=TRUE)
# two sample
source("./stat.R")
# main simulation
myMainSimulation=function(p,n1,n2,r=3,beta){
theEig <- rep(1,p)
theEig[1:r] <- rep(p^beta,r)
temp <- newModelGenerator(theEig)
normalModelSimulator <- temp$normalModelSimulator
V <- temp$V
tau=(n1+n2)/n1/n2
theoryPower=function(mu1,mu2){
sum((mu1-mu2)^2)/sqrt(2*tau^2*p)
}
temp1=rnorm(p,0,1)
temp2=rnorm(p,0,1)
outMy=NULL
for(hh in c(0,1,2,3,4,5)){
myC=sqrt(hh*sqrt(2*tau^2*p)/sum((temp1-temp2)^2))
mu1=temp1*myC
mu2=temp2*myC
tempMy=NULL
for(i in 1:30){
X1 <- normalModelSimulator(n=n1)+outer(rep(1,n1),mu1)
X2 <- normalModelSimulator(n=n2)+outer(rep(1,n2),mu2)
temp=doTest(X1,X2,n1,n2,p)
tempMy[i]=temp
}
outMy=c(outMy,sum(tempMy<0.05)/length(tempMy))
}
list(my=outMy)
}
myPlot=function(uio){
cc=seq(0,5,1)
temp1=data.frame(h=cc,Power=uio$my,Method="New")
#temp2=data.frame(h=cc,Power=uio$chen,Method="CQ")
#temp3=data.frame(h=cc,Power=uio$fast,Method="FAST")
#temp4=data.frame(h=cc,Power=uio$sri,Method="S")
#myD=rbind(temp1,temp2)#,temp3,temp4)
myD=temp1
ggplot(data=myD,aes(x=h,y=Power,color=Method,linetype=Method))+
geom_line()+ylim(0,1)+
#xlab(expression( paste("||",mu[1]-mu[2],"||"^2)))
xlab("d")
}
p=400;n1=300;n2=310;r=3;beta=0.5
jjj1=myMainSimulation(p,n1,n2,r,beta)
myPlot(jjj1)+ggtitle(expression(paste(n[1],"=300, ",n[2],"=310, p=400, r=3, ",beta,"=0.5")))+theme_linedraw()
jjj1
debugSource('~/firstP/code/powerByAsym.R', echo=TRUE)
tempMy
hist(tempMy)
debugSource('~/firstP/code/powerByAsym.R', echo=TRUE)
hist(tempMy)
outMy
outMy
p=200;n1=300;n2=310;r=3;beta=0.5
jjj1=myMainSimulation(p,n1,n2,r,beta)
# two sample
source("./stat.R")
# main simulation
myMainSimulation=function(p,n1,n2,r=3,beta){
theEig <- rep(1,p)
theEig[1:r] <- rep(p^beta,r)
temp <- newModelGenerator(theEig)
normalModelSimulator <- temp$normalModelSimulator
V <- temp$V
tau=(n1+n2)/n1/n2
theoryPower=function(mu1,mu2){
sum((mu1-mu2)^2)/sqrt(2*tau^2*p)
}
temp1=rnorm(p,0,1)
temp2=rnorm(p,0,1)
outMy=NULL
for(hh in c(0,1,2,3,4,5)){
myC=sqrt(hh*sqrt(2*tau^2*p)/sum((temp1-temp2)^2))
mu1=temp1*myC
mu2=temp2*myC
tempMy=NULL
for(i in 1:300){
X1 <- normalModelSimulator(n=n1)+outer(rep(1,n1),mu1)
X2 <- normalModelSimulator(n=n2)+outer(rep(1,n2),mu2)
temp=doTest(X1,X2,n1,n2,p)
tempMy[i]=temp
}
outMy=c(outMy,sum(tempMy<0.05)/length(tempMy))
}
list(my=outMy)
}
myPlot=function(uio){
cc=seq(0,5,1)
temp1=data.frame(h=cc,Power=uio$my,Method="New")
#temp2=data.frame(h=cc,Power=uio$chen,Method="CQ")
#temp3=data.frame(h=cc,Power=uio$fast,Method="FAST")
#temp4=data.frame(h=cc,Power=uio$sri,Method="S")
#myD=rbind(temp1,temp2)#,temp3,temp4)
myD=temp1
ggplot(data=myD,aes(x=h,y=Power,color=Method,linetype=Method))+
geom_line()+ylim(0,1)+
#xlab(expression( paste("||",mu[1]-mu[2],"||"^2)))
xlab("d")
}
p=200;n1=300;n2=310;r=3;beta=0.5
jjj1=myMainSimulation(p,n1,n2,r,beta)
p=400;n1=200;n2=210;r=3;beta=0.5
jjj1=myMainSimulation(p,n1,n2,r,beta)
jjj1
